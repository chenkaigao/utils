<!--加载属性文件-->
    <!--
	第1种方式：
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="jdbc.properties"/>
    </bean>
    -->
    <!--
	第2种方式：
    1.下面这种加载属性文件的方式需要导入响应的命名空间
    2.并且name值不能和key值一样，所以在key值前加jdbc.     value="${jdbc.driverClass}
	<context:property-placeholder location="classpath:jdbc.properties"/>
    -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="druid" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druid"/>
    </bean>


测试类：
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:applicationContext.xml")
public class SpringJdbcTest {
    @Resource(name = "jdbcTemplate")
    private JdbcTemplate jdbcTemplate;

    @Test
    public void test(){
        //原生的写法就是new出来的，用spring就直接在xml中做配置
        //1.创建连接池（数据库相关信息）
//        DriverManagerDataSource dataSource = new DriverManagerDataSource();
//        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
//        dataSource.setUrl("jdbc:mysql:///spring");
//        dataSource.setUsername("root");
//        dataSource.setPassword("1234");
        //2.创建jdbc模板
//        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        //插入操作
        jdbcTemplate.update("insert into account values (null,?,?)","druid3",111d);
        //删除操作
        jdbcTemplate.update("delete from account where id = ?",3);
        //更新操作
        jdbcTemplate.update("update account set name = ?,money = ? where id = ?","666",666d,6);
        //查询字段
        String s = jdbcTemplate.queryForObject("select name from account where id = ?", String.class, 1);
        System.out.println(s);
        //查询数量
        Long aLong = jdbcTemplate.queryForObject("select count(*) from account", Long.class);
        System.out.println(aLong);
        //查询一条记录
        Account account = jdbcTemplate.queryForObject("select * from account where id = ?", new MyRowMap(), 10);
        System.out.println(account);
        //查询所有记录
        List<Account> query = jdbcTemplate.query("select * from account", new MyRowMap());
        for (Account account1 : query) {
            System.out.println(account1);
        }
    }
}
class MyRowMap implements RowMapper<Account>{

    @Override
    public Account mapRow(ResultSet resultSet, int i) throws SQLException {
        Account account = new Account();
        account.setId(resultSet.getInt("id"));
        account.setName(resultSet.getString("name"));
        account.setMoney(resultSet.getDouble("money"));
        return account;
    }
}
