在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程

不破坏原来的类，生成一个代理类，在原来类的基础上进行增强。可以随时添加，取消添加的功能。核心就是使用代理类。

注意：使用接口时，Spring中的AOP使用的是JDK动态代理。	不使用时，用的是Cglib动态代理。
JDK动态代理原理：
需要定义接口，然后提供一个代理类，代理类写一个方法返回一个代理对象。当这个对象调用方法时，就会经过回调函数
public class GoodsJDKProxy {
    public GoodsDao creatProxy(GoodsDao goodsDao){
        //增强
        GoodsDao goodsDao1 = (GoodsDao)Proxy.newProxyInstance(goodsDao.getClass().getClassLoader(),
                goodsDao.getClass().getInterfaces(),
                new InvocationHandler() {
                    @Override/*当调用对象的时候，所有的方法都会来到这里*/
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        if("save".equals(method.getName())){
                            System.out.println("权限校验");
                            GoodsDao goodsDao2 = (GoodsDao)method.invoke(goodsDao, args);
                            System.out.println("日志添加");
                            return goodsDao2;
                        }
                        return method.invoke(goodsDao,args);
                    }
                });
        return goodsDao1;
    }
}

cglib动态代理原理：
创建一个子类作为代理对象，当子类调用方法的时候会调用回调函数
public class UserDaoCglibProxy implements MethodInterceptor {
    public UserDao createCglibProxy(UserDao userDao){
        //1.创建核心类
        Enhancer enhancer = new Enhancer();
        //2.设置父类    继承方式    创建一个子类  自动继承UserDao
        enhancer.setSuperclass(userDao.getClass());
        //3.设置回调
        enhancer.setCallback(this);
        //4.创建代理对象  就是把核心类给你
        UserDao obj = (UserDao)enhancer.create();
        return obj;
    }

    @Override
    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
        if("save".equals(method.getName())){
            System.out.println("权限校验");
            Object obj = methodProxy.invokeSuper(o, objects);
            System.out.println("添加日志");
            return obj;
        }
	//方法代理对象执行父类的方法invokeSuper,把子类o,和参数objects传入
        Object obj = methodProxy.invokeSuper(o, objects);
        return obj;
    }
}



AOP相关术语:
Joinpoint:连接点	能够被增强的方法，这些方法就可以称为是连接点
Pointcut:切入点		真正被拦截的方法/真正被增加的方法
Advice：通知		增加的内容/功能/方法，通常都是封装成一个方法， 这个方法我们就称为通知
Introduction:引介	类层面的增加，给原有的类添加一些新的属性方法，在开发中通常都是给方法进行增加，很少用，但要知道一下
Target:被增加的对象	
Weaving:织入		将通知应用到目标对象的过程，大概意思就是如何织入这些方法
Proxy:代理对象
Aspect:切面		多个通知和多个切入点的集合


Spring中AOP使用：
1.引入spring基本jar包
2.引入aop开发的相关jar包
3.配置文件中引入aop约束
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
		       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		       xmlns:aop="http://www.springframework.org/schema/aop"
		       xsi:schemaLocation="http://www.springframework.org/schema/beans
		        http://www.springframework.org/schema/beans/spring-beans.xsd
		        http://www.springframework.org/schema/aop
		        http://www.springframework.org/schema/aop/spring-aop.xsd">	
		</beans>
4.Spring测试
	测试时，每次都需要获取工厂
	通过spring-test，就不用每次获取
	添加测试依赖包	
5.测试	
6.编写一个切面类
7.将切面交给spring
8.配置AOP完成对目标产生代理


AOP通知类型：
前置通知：	在目标方法执行之前进行操作
后置通知：	在目标方法执行之后 进行操作	
环绕通知：	在目标方法执行之前 和之后进行操作	public Object arount()
异常抛出通知：	在程序出现异常时进行操作	
最终通知：	无论代码是否有异常，都会执行
		

AOP切入点表达式:
基于execution函数完成
语法
	【访问修饰符】 方法返回值 包名.类名.方法名（参数）
	public com.myxq.demo2.GoodsDaoImpl.save(..) 	参数为任意参数
	* com.myxq.demo2.GoodsDaoImpl.save(..)  	*任意类型
	* com.myxq.demo2.GoodsDaoImpl+.save(..)		+当前类和子类
	* com.myxq..*.*(..)				com.myxq包以及子包下面所有类的所有方法

	
AOP注解方式ApsectJ开发：
1.在配置文件中开启注解			<!--AOP 开启注解--><aop:aspectj-autoproxy/>
2.编写切面类
3.在切面类上添加注解	
@Aspect
public class GoodsDaoAspect {
    //前置通知
    @Before(value = "GoodsDaoAspect.point1() || GoodsDaoAspect.point2()")
    public void check(){
        System.out.println("权限校验");
    }
    //后置通知
    @AfterReturning(value = "GoodsDaoAspect.point2()",returning = "res")
    public void log(Object res){
        System.out.println("日志"+res);
    }
    //环绕通知
    @Around(value = "GoodsDaoAspect.point3()")
    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
        System.out.println("开始事务");
        Object proceed = joinPoint.proceed();
        System.out.println("提交事务");
        return proceed;
    }
    //异常通知
    @AfterThrowing(value = "GoodsDaoAspect.point4()",throwing = "ex")
    public void afterThrowing(Throwable ex){
        System.out.println(ex.getMessage());
    }
    //最终通知
    @After(value = "GoodsDaoAspect.point4()")
    public void after(){
        System.out.println("最终通知");
    }
	/*
	有时候一个方法要添加前置通知对又要添加异常通知，又要添加最终通知
	可以在切面当中定义好切入点
	在通知当中直接使用定义好的切入点表达式
	定义多个切入点
	一个通知同时定义到多个方法当中
	*/
    @Pointcut(value = "execution(* com.itlike.demo1.GoodsDao.save(..))")
    public void point1(){}
    @Pointcut(value = "execution(* com.itlike.demo1.GoodsDao.update(..))")
    public void point2(){}
    @Pointcut(value = "execution(* com.itlike.demo1.GoodsDao.delete(..))")
    public void point3(){}
    @Pointcut(value = "execution(* com.itlike.demo1.GoodsDao.find(..))")
    public void point4(){}
}

